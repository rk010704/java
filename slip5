1: Write a program for multilevel inheritance such that Country is inherited from
Continent.State is inherited from Country. Display the place, State, Country and Continent.
solution:-

import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.IOException;
class Continent{
String con;
InputStreamReader i = new InputStreamReader(System.in);
BufferedReader r = new BufferedReader(i);
void con_input() throws IOException
{
System.out.println("Enter the continent name:");
con = r.readLine();
}
}
class Country extends Continent
{
String cou;
void cou_input()throws IOException
{
System.out.println("Enter the country name:");
cou = r.readLine();}
}
class State extends Country
{
String sta;
void sta_input()throws IOException
{
System.out.println("Enter the state name:");
sta = r.readLine();}
}
class Main extends State
{
String pla;
void pla_input()throws IOException
{
System.out.println("Enter the place name:");
pla = r.readLine();}
public static void main(String args[])throws IOException
{
Main s = new Main();
s.con_input();
s.cou_input();
s.sta_input();
s.pla_input();
System.out.println("place is:"+s.pla);
System.out.println("state is:"+s.sta);
System.out.println("country is:"+s.cou);
System.out.println("continent is:"+s.con);
}
}


2: Write a menu driven program to perform the following operations on
multidimensional array ie matrices : ï‚§ Addition Multiplication exit
solution:-

import java.util.Arrays; 
import java.util.Scanner; 
public class Matrix { 
 public static void main(String[] args) { 
  Scanner scan = new Scanner(System.in);
 int a[][] = { { 5, 6, 7 }, { 8, 9, 10 }, { 3, 1, 2 } }; 
 int b[][] = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } }; 
 int c[][] = new int[3][3]; 
  System.out.println("A = " + Arrays.deepToString(a)); 
 System.out.println("B = " + Arrays.deepToString(b)); 
 int choice;
 do { 
 System.out.println("\nChoose the matrix operation,"); 
 System.out.println("----------------------------"); 
 System.out.println("1. Addition"); 
 System.out.println("2. Subtraction"); 
 System.out.println("3. Multiplication"); 
 System.out.println("4. Transpose"); 
 System.out.println("5. Exit"); 
 System.out.println("----------------------------"); 
 System.out.print("Enter your choice: "); 
 choice = scan.nextInt(); 
 switch (choice) { 
 case 1: 
 c = add(a, b); 
 System.out.println("Sum of matrix: "); 
 System.out.println(Arrays.deepToString(c)); 
 break; 
 case 2:
c = subtract(a, b); 
 System.out.println("Subtraction of matrix: "); 
 System.out.println(Arrays.deepToString(c)); 
 break; 
 case 3: 
 c = multiply(a, b); 
 System.out.println("Multiplication of matrix: "); 
 System.out.println(Arrays.deepToString(c)); 
 break; 
 case 4: 
 System.out.println("Transpose of the first matrix: "); 
 c = transpose(a); 
 System.out.println(Arrays.deepToString(c)); 
 System.out.println("Transpose of the second matrix: "); 
 c = transpose(b); 
 System.out.println(Arrays.deepToString(c)); 
 break; 
 case 5: 
 System.out.println("Thank You."); 
 return; 
 default: 
 System.out.println("Invalid input."); 
 System.out.println("Please enter the correct input."); 
 } 
 } while (true); 
 } 
 public static int[][] add(int[][] a, int[][] b) {
 int row = a.length; 
 int column = a[0].length; 
 int sum[][] = new int[row][column]; 
 for (int i = 0; i < row; i++) { 
 for (int j = 0; j < column; j++) { 
 sum[i][j] = a[i][j] + b[i][j]; 
 } 
 } 
 return sum; 
 } 
 public static int[][] subtract(int[][] a, int[][] b) { 
 int row = a.length; 
 int column = a[0].length; 
 int sub[][] = new int[row][column]; 
 for (int i = 0; i < row; i++) { 
 for (int j = 0; j < column; j++) { 
 sub[i][j] = a[i][j] - b[i][j]; 
 } 
 }
 return sub; 
 } 
 public static int[][] multiply(int[][] a, int[][] b) { 
 int row = a.length; 
 int column = b[0].length; 
 int product[][] = new int[row][column]; 
 for (int i = 0; i < row; i++) { 
 for (int j = 0; j < column; j++) { 
 product[i][j] = 0; 
  for (int k = 0; k < a[0].length; k++) { 
 product[i][j] += a[i][k] * b[k][j]; 
 } 
 } 
 }
return product; 
 } 
 public static int[][] transpose(int[][] a) { 
  int row = a.length; 
 int column = a[0].length; 
 int temp[][] = new int[row][column]; 
 for (int i = 0; i < row; i++) { 
 for (int j = 0; j < column; j++) { 
 temp[i][j] = a[j][i]; 
 } 
 } 
 return temp; 
 } 
}
